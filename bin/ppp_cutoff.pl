#!/usr/bin/env perl
# $Id: ppp_cutoff.pl 658 2011-07-28 18:54:29Z malay $

##---------------------------------------------------------------------------##
##  File: ppp_cutoff.pl
##       
##  Author:
##        Malay <malay@bioinformatics.org>
##
##  Description:
##     
#******************************************************************************
#* Copyright (C) 2010 Malay K Basu <malay@bioinformatics.org> 
#* This work is distributed under the license of Perl iteself.
###############################################################################

=head1 NAME

ppp_cutoff.pl - Given a raw ppp result file, this script can mark the file for significant hits using a slope parameter.

=head1 SYNOPSIS

ppp_cutoff.pl [options] ppp_result_file


=head1 DESCRIPTION

If you have not used "-m" parameter to run ppp.pl, you can use this script to file the significant hits. The scripts calculated the delta of scores between two consecutive ppp hits and can calculate the cutoff when it deviates from a given value.


=head1 ARGUMENTS 

=over 4

=item ppp_result_file

The argument is a ppp result file, generated by ppp.pl.


=back

=head1 OPTIONS

=item B<--slope | -s integer>

This an integer value from 1 to 100, indicating the percent difference between two consecutive ppp hits to determined a cutoff.


=head1 SEE ALSO

=head1 COPYRIGHT

Copyright (c) 2010 Malay K Basu <malay@bioinformatics.org>

=head1 AUTHORS

Malay K Basu <malay@bioinformatics.org>

=cut



##---------------------------------------------------------------------------##
## Module dependencies
##---------------------------------------------------------------------------##

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;


##---------------------------------------------------------------------------##
# Option processing
#  e.g.
#   -t: Single letter binary option
#   -t=s: String parameters
#   -t=i: Number paramters
##---------------------------------------------------------------------------##


my %options = (); # this hash will have the options

#
# Get the supplied command line options, and set flags
#




GetOptions (\%options, 
            'help|?',
            'slope|s=i') || pod2usage( -verbose => 0 );

_check_params( \%options );

my $file = shift @ARGV;
my $fh;
if ($file && -s $file) {
	open ($fh, $file) || die "Can't open $file\n";
}else {
	$fh = \*STDIN;
}

my @lines;
my @scores;

my $line_num = 0;
my $header;

while  (my $line = <$fh>) {
	$line_num++;
	if ($line_num == 1) {
		$header = $line;
		next;
	}
	chomp $line;
	next if $line=~ /^\-+$/;
	push @lines, $line;
	unless ($line =~ /^\#/) {
		my @f = split (/\t/, $line);
		next if ($f[5] > -0.001);
		push @scores, $f[5];
	}
	
}

close ($fh);

my @sorted_scores = sort {$b <=> $a }@scores;
#print "@sorted_scores\n";
my $lastscore;
my $cutoff;
foreach my $score (@sorted_scores) {
	next if $score > -1;
	unless ($lastscore) {
		$lastscore = $score;
		next;
	}
	my $diff = (($lastscore - $score)/ $lastscore)* 100;
#	print STDERR "$lastscore\t$score\t$diff\n";
	my $positive_diff = $diff < 0 ? -($diff) : $diff;
	if ($positive_diff > $options{slope}) {
		$cutoff = $lastscore;
		last;
	}
	$lastscore = $score;
}

print STDERR "CUTOFF=$cutoff\n";
print $header;
print "Significant hits:\n";
my $marker_printed = 0;
foreach my $line (@lines) {
	my @f = split (/\t/, $line);
	next if $f[5] >= 0;
	if ($f[5] > $cutoff && (!$marker_printed)) {
		print "Insignificant hits:\n";
		$marker_printed  = 1;
	}
	print $line ,"\n";
}


exit (0);

######################## S U B R O U T I N E S ############################

sub _check_params {
	my $opts = shift;
	pod2usage( -verbose => 2 ) if ($opts->{help} || $opts->{'?'});
	pod2usage( -verbose => 1 ) unless ( exists $opts->{'slope'});
	
}